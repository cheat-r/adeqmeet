import logging, asyncio, json, os
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, MessageHandler, ContextTypes, filters

CHANNEL = '-1002016542799'
ADMIN = '-1002174615446'

logging.getLogger("httpx").setLevel(logging.WARNING)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

media_group_cache = defaultdict(list)
media_group_tasks = {}
media_group_lock = asyncio.Lock()

if os.path.exists('db.json'):
    with open('db.json', 'r', encoding='utf-8') as fp:
        db = json.load(fp)
else:
    db = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not str(update.effective_user.id) in db.keys():
        db[str(update.effective_user.id)] = {
            "msg_id": None,
            "status": 'unpub',
            "ban": False,
            "chat_id": update.message.chat_id
        }
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –µ—ë –≤—ã–ª–æ–∂–∏–º!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /delete.")
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–≤–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç.")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        return
    try:
        member = await context.bot.get_chat_member(ADMIN, update.effective_user.id)
        if member.status in ('kicked', 'left'):
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        try:
            if db[context.args[0]]['ban'] == False:
                await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ!')
                return
            db[context.args[0]]['ban'] = False
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            with open('db.json', 'w', encoding='utf-8') as fp:
                json.dump(db, fp, indent=2, ensure_ascii=False)
        except:
            await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∞–π–¥–∏.')
    except:
        await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db[str(update.effective_user.id)]['status'] == 'pending' or db[str(update.effective_user.id)]['status'] == 'unpub':
        if not db[str(update.effective_user.id)]['msg_id']:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∫–∞ —á—Ç–æ –≤–∞–º –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å...")
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ê–¥–º–∏–Ω—ã –µ—â—ë –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤–∞—à—É –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É!\n–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —Å—Ç–∞—Ä–∞—è –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n–ï—Å–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤—Å—ë –∂–µ –Ω–µ –æ–¥–æ–±—Ä—è—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –µ—â—ë —Ä–∞–∑.")
        return
    keyboard = [
        [InlineKeyboardButton("üí• –î–∞, —É–¥–∞–ª–∏—Ç—å!", callback_data="delete.accept"), InlineKeyboardButton("üåª –ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="delete.cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!", reply_markup=reply_markup)

async def group(media_group_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
    
    async with media_group_lock:
        messages = media_group_cache.get(media_group_id, [])
        if media_group_id in media_group_cache:
            del media_group_cache[media_group_id]
        if media_group_id in media_group_tasks:
            del media_group_tasks[media_group_id]
    
    if not messages:
        return
    
    messages.sort(key=lambda msg: msg.message_id)
    media = []
    caption_set = False  # –§–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å—å –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    
    for message in messages:
        if message.caption:
            if len(message.caption) > 1006:
                await message.reply_text(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {len(message.caption)-1006} —Å–∏–º–≤.')
                break
        if message.photo:
            file_id = message.photo[-1].file_id
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if not caption_set:
                if message.caption:
                    media.append(InputMediaPhoto(
                        media=file_id,
                        caption=message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet',
                        caption_entities=message.caption_entities
                    ))
                else:
                    media.append(InputMediaPhoto(media=file_id, caption='#–∞–Ω–∫–µ—Ç–∞@adeqmeet'))
            else:
                media.append(InputMediaPhoto(media=file_id))
            caption_set = True
                
        elif message.video:
            file_id = message.video.file_id
            if not caption_set:
                if message.caption:
                    media.append(InputMediaVideo(
                        media=file_id,
                        caption=message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet',
                        caption_entities=message.caption_entities
                    ))
                else:
                    media.append(InputMediaVideo(media=file_id, caption='#–∞–Ω–∫–µ—Ç–∞@adeqmeet'))
            else:
                media.append(InputMediaVideo(media=file_id))
            caption_set = True
    
    if media:
        keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"mod.accept-{update.effective_user.id}"), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod.deny-{update.effective_user.id}")],
        [InlineKeyboardButton("üí• –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"mod.ban-{update.effective_user.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        msg = await context.bot.send_media_group(chat_id=ADMIN, media=media)
        await msg[0].reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
        db[str(update.effective_user.id)]['status'] = 'pending'
        await update.message.reply_text('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ.')
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)

async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message = update.message
    bot = context.bot
    if db[str(update.effective_user.id)]['ban']:
        await message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã.')
        return
    if db[str(update.effective_user.id)]['status'] == 'pending':
        await message.reply_text('–ê–¥–º–∏–Ω—ã –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –µ—ë –æ–¥–æ–±—Ä–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è).')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤)
    if message.media_group_id:

        media_group_id = message.media_group_id
        async with media_group_lock:
            media_group_cache[media_group_id].append(message)
            if media_group_id not in media_group_tasks:
                media_group_tasks[media_group_id] = asyncio.create_task(
                    group(media_group_id, update, context)
                )
        return
    keyboard = [
    [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"mod.accept-{update.effective_user.id}"), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod.deny-{update.effective_user.id}")],
    [InlineKeyboardButton("üí• –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"mod.ban-{update.effective_user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text:
        if len(message.text) > 4078:
            await message.reply_text(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {len(message.text)-4078} —Å–∏–º–≤.')
            return
        await bot.send_message(ADMIN, message.text+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet', entities=message.entities, reply_markup=reply_markup, disable_web_page_preview=True)
    else:
        if message.caption:
            if len(message.caption) > 1006:
                await message.reply_text(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {len(message.caption)-1006} —Å–∏–º–≤.')
                return
        if message.photo:
            await bot.send_photo(ADMIN, message.photo[-1].file_id, message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet' if message.caption else '#–∞–Ω–∫–µ—Ç–∞@adeqmeet', caption_entities=message.caption_entities, reply_markup=reply_markup)
        elif message.video:
            await bot.send_video(ADMIN, message.video.file_id, caption=message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet' if message.caption else '#–∞–Ω–∫–µ—Ç–∞@adeqmeet', caption_entities=message.caption_entities, reply_markup=reply_markup)
        elif message.audio:
            await bot.send_audio(ADMIN, message.audio.file_id, caption=message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet' if message.caption else '#–∞–Ω–∫–µ—Ç–∞@adeqmeet', caption_entities=message.caption_entities, reply_markup=reply_markup)
        elif message.document:
            await bot.send_document(ADMIN, message.document.file_id, message.caption+'\n\n#–∞–Ω–∫–µ—Ç–∞@adeqmeet' if message.caption else '#–∞–Ω–∫–µ—Ç–∞@adeqmeet', caption_entities=message.caption_entities, reply_markup=reply_markup)
        else:
            await message.reply_text('–ù—É –∏ –Ω–∞—Ö–µ—Ä –≤—ã —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É, —Ç–æ–≥–¥–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º.')
            return
    db[str(update.effective_user.id)]['status'] = 'pending'
    await message.reply_text('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ.')
    with open('db.json', 'w', encoding='utf-8') as fp:
        json.dump(db, fp, indent=2, ensure_ascii=False)

async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        action, user_id = query.data.split('-')
    except:
        action = query.data

    if action == 'delete.cancel':
        await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if action == 'delete.accept':
        try:
            if isinstance(db[str(update.effective_user.id)]['msg_id'], list):
                await context.bot.delete_messages(CHANNEL, db[str(update.effective_user.id)]['msg_id'])
            else:
                await context.bot.delete_message(CHANNEL, db[str(update.effective_user.id)]['msg_id'])
            db[str(update.effective_user.id)]['msg_id'] = None
            db[str(update.effective_user.id)]['status'] = 'unpub'
            await query.edit_message_text(text=f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!\n(–µ—Å–ª–∏ –Ω–∞–¥—É–º–∞–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É)")
        except:
            await context.bot.send_message(ADMIN, f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:\nt.me/c/{str(CHANNEL)[4:]}/{db[str(update.effective_user.id)]['msg_id']}')
            db[str(update.effective_user.id)]['msg_id'] = None
            db[str(update.effective_user.id)]['status'] = 'unpub'
            await query.edit_message_text(text=f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ. –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!\n(–µ—Å–ª–∏ –Ω–∞–¥—É–º–∞–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É)")
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)
    
    if action == 'mod.deny':
        if query.message.reply_to_message:
            try:
                await query.message.reply_to_message.delete()
            except:
                pass
        try:
            await query.delete_message()
        except:
            if query.message.caption:
                await query.edit_message_caption('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
            else:
                await query.edit_message_text('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')
        if db[user_id]['msg_id']:
            db[user_id]['status'] = 'pub'
        else:
            db[user_id]['status'] = 'unpub'
        await context.bot.send_message(db[user_id]['chat_id'], '–í–∞—à—É –∞–Ω–∫–µ—Ç—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑.')
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)
    if action == 'mod.accept':
        if db[user_id]['msg_id']:
            try:
                if isinstance(db[user_id]['msg_id'], list):
                    await context.bot.delete_messages(CHANNEL, db[user_id]['msg_id'])
                else:
                    await context.bot.delete_message(CHANNEL, db[user_id]['msg_id'])
            except:
                await context.bot.send_message(ADMIN, f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:\nt.me/c/{str(CHANNEL)[4:]}/{db[user_id]['msg_id']}')
        if query.message.reply_to_message:
            msgs = []
            for ids in range(query.message.reply_to_message.message_id, query.message.message_id):
                msgs.append(ids)
            msg = await context.bot.copy_messages(CHANNEL, ADMIN, msgs)
            db[user_id]['msg_id'] = []
            for ids in msg:
                db[user_id]['msg_id'].append(ids.message_id)
            msg = msg[0]
            try:
                await query.message.reply_to_message.delete()
            except:
                pass
        else:
            msg = await context.bot.copy_message(CHANNEL, ADMIN, query.message.message_id)
            db[user_id]['msg_id'] = msg.message_id
        try:
            await query.delete_message()
        except:
            if query.message.caption:
                await query.edit_message_caption('–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.')
            else:
                await query.edit_message_text('–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.')
        db[user_id]['status'] = 'pub'
        await context.bot.send_message(db[user_id]['chat_id'], f'–í–∞—à—É –∞–Ω–∫–µ—Ç—É –ø—Ä–∏–Ω—è–ª–∏! –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\nt.me/c/{CHANNEL[4:]}/{msg.message_id}\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /delete.')
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)
    if action == 'mod.ban':
        db[user_id]['ban'] = True
        if db[user_id]['msg_id']:
            db[user_id]['status'] = 'pub'
        else:
            db[user_id]['status'] = 'unpub'
        try:
            await query.delete_message()
        except:
            if query.message.caption:
                await query.edit_message_caption('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.')
            else:
                await query.edit_message_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.')
        with open('db.json', 'w', encoding='utf-8') as fp:
            json.dump(db, fp, indent=2, ensure_ascii=False)


token = open('token.txt', 'r').readline()
if '/n' in token:
    token = token[:-2]
if __name__ == '__main__':
    application = Application.builder().token(token).build()

    application.add_handlers([CommandHandler('start', start),
                              CommandHandler('delete', delete),
                              CommandHandler('help', help),
                              CommandHandler('unban', unban),
                              CallbackQueryHandler(buttons),
                              MessageHandler(~filters.COMMAND&filters.ChatType.PRIVATE, form)])
    
    application.run_polling()
with open('db.json', 'w', encoding='utf-8') as fp:
    json.dump(db, fp, indent=2, ensure_ascii=False)